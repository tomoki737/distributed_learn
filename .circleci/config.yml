version: 2.1
jobs:
  build:
    docker:
      - image: circleci/php:8-node-browsers
      - image: circleci/postgres:11.6-alpine
        environment:
          POSTGRES_DB: larasns
          POSTGRES_USER: default
          POSTGRES_PASSWORD: secret
          APP_KEY: ${APP_KEY}
    environment:
      APP_ENV: testing
      DB_CONNECTION: pgsql
      DB_HOST: localhost
      DB_PORT: 5432
      DB_DATABASE: larasns
      DB_USERNAME: default
      DB_PASSWORD: secret
    steps:
      - checkout
      - run: sudo composer self-update --1
      - run: pwd
      - restore_cache:
          key: composer-v1-{{ checksum "./src/composer.lock" }}
      - run:
          name: composer install
          command: |
            cd src/
            composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "./src/composer.lock" }}
          paths:
            - vendor
      - restore_cache:
          key: npm-v1-{{ checksum "./src/package-lock.json" }}
      - run:
          name: npm ci
          command: |
            if [ ! -d node_modules ]; then
              cd src/
              npm ci
            fi
      - save_cache:
          key: npm-v1-{{ checksum "./src/package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: npm run dev
          command: |
            cd src/
            npm run dev
      - run:
          name: get ready for postgres
          command: |
            sudo apt-get update --allow-unauthenticated
            sudo apt-get install libpq-dev --allow-unauthenticated
            sudo docker-php-ext-install pdo_pgsql
            dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: php test
          command: |
            cd src/
            pwd
            php artisan test
  deploy:
    docker:
      - image: circleci/php:8-node-browsers
    steps:
      - add_ssh_keys
      - run:
          name: deploy
          command: |
            ssh -o StrictHostKeyChecking=no -t webapp@${HOST_NAME} "cd distributed_learn && \
              git stash && \
              git pull origin main && \
              cd src/ && \
              composer install -n --no-dev --prefer-dist && \
              npm install && \
              npm ci && \
              npm run prod && \
              php artisan migrate --force && \
              php artisan config:cache"
workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - main
