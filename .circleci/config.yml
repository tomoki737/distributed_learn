version: 2.1
orbs:
  aws-ecs: circleci/aws-ecs@3.2
  aws-cli: circleci/aws-cli@2.1.0
jobs:
  build:
    docker:
      - image: circleci/php:8-node-browsers
      - image: circleci/postgres:11.6-alpine
        environment:
          POSTGRES_DB: larasns
          POSTGRES_USER: default
          POSTGRES_PASSWORD: secret
          APP_KEY: ${APP_KEY}
    environment:
      APP_ENV: testing
      DB_CONNECTION: pgsql
      DB_HOST: localhost
      DB_PORT: 5432
      DB_DATABASE: larasns
      DB_USERNAME: default
      DB_PASSWORD: secret
    steps:
      - checkout
      - run: sudo composer self-update --1
      - run: pwd
      - restore_cache:
          key: composer-v1-{{ checksum "./src/composer.lock" }}
      - run:
          name: composer install
          command: |
            cd src/
            composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "./src/composer.lock" }}
          paths:
            - vendor
      - restore_cache:
          key: npm-v1-{{ checksum "./src/package-lock.json" }}
      - run:
          name: npm ci
          command: |
            if [ ! -d node_modules ]; then
              cd src/
              npm ci
            fi
      - save_cache:
          key: npm-v1-{{ checksum "./src/package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: npm run dev
          command: |
            cd src/
            npm run dev
      - run:
          name: get ready for postgres
          command: |
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4EB27DB2A3B88B8B
            sudo apt-get update
            sudo apt-get install libpq-dev
            sudo docker-php-ext-install pdo_pgsql
            dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: php test
          command: |
            cd src/
            pwd
            php artisan test

  build-and-push-image:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: docker build
          command: |
            docker build -t nginx:"${CIRCLE_SHA1}" -f ./docker/nginx/Dockerfile .
            docker build -t php:"${CIRCLE_SHA1}" -f ./docker/php/Dockerfile .
      - run:
          name: push
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_ACCOUNT_URL}
            docker tag nginx:"${CIRCLE_SHA1}" ${AWS_ECR_ACCOUNT_URL}/nginx:"${CIRCLE_SHA1}"
            docker tag php:"${CIRCLE_SHA1}" ${AWS_ECR_ACCOUNT_URL}/php:"${CIRCLE_SHA1}"
            docker push ${AWS_ECR_ACCOUNT_URL}/nginx:"${CIRCLE_SHA1}"
            docker push ${AWS_ECR_ACCOUNT_URL}/php:"${CIRCLE_SHA1}"
workflows:
  build-and-deploy:
    jobs:
      - build
      - build-and-push-image:
          requires:
            - build
          filters:
            branches:
              only:
                - main

      - aws-ecs/deploy-service-update:
          family: "distributed_learn_task_definition"
          service-name: "distributed-learn-service"
          cluster: "distributed-learn-cluster"
          container-image-name-updates: "container=php,image-and-tag=${AWS_ECR_ACCOUNT_URL}/php:${CIRCLE_SHA1},container=nginx,image-and-tag=${AWS_ECR_ACCOUNT_URL}/nginx:${CIRCLE_SHA1}"
          requires:
            - build-and-push-image
          filters:
            branches:
              only:
                - main
